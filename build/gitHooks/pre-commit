#!/usr/bin/env php
<?php
/**
 * .git/hooks/pre-commit
 *
 * This pre-commit hooks will check for PHP errors (lint), and make sure the
 * code is PSR-2 compliant.
 *
 * Dependecy: PHP-CS-Fixer (http://cs.sensiolabs.org/)
 */

class PreCommitChecks
{
    /**
     * @var bool
     */
    private $error = false;

    /**
     * @return int
     */
    public function run()
    {
        $fileList = $this->getCommittedFileList();

        if ($this->isRebase()) {
            echo 'Not on branch' . PHP_EOL;
            return (int) 0;
        }

        $beforeRef = $this->getRef();
        $this->stashTree();
        $afterRef = $this->getRef();

        if ($beforeRef == $afterRef) {
            echo 'No Changes' . PHP_EOL;
            return (int) 0;
        }

        echo 'Running PHP lint' . PHP_EOL;
        if (!$this->phpLint($fileList)) {
            echo 'ERROR: There are some PHP syntax errors!' . PHP_EOL;
        }

        if ($this->isPHPCSFixerAvailable()) {
            echo 'Checking code style' . PHP_EOL;
            if (!$this->checkCodeStyle($fileList)) {
                echo "ERROR: Your commit does not comply with Shopware's coding standards." . PHP_EOL;
            }
        } else {
            echo "ERROR: PHP-CS-Fixer is NOT installed. Please install globally (http://cs.sensiolabs.org/)." . PHP_EOL;
            $this->error = true;
        }

        echo "Checking for duplicate migration numbers." . PHP_EOL;
        if (($duplicateMigrationId = $this->hasDuplicateMigrations()) !== false) {
            echo "ERROR: You are using the migration number ".$duplicateMigrationId." multiple times." . PHP_EOL;
            $this->error = true;
        }

        if ($this->error) {
            echo "If you are ABSOLUTELY sure your code is correct, you can use 'git commit --no-verify' to bypass this validation" . PHP_EOL;
        }

        $this->unstashTree();

        exit((int) $this->error);
    }

    /**
     * @return bool
     */
    public function isPHPCSFixerAvailable()
    {
        $output = [];
        $return = 0;
        exec('command -v php-cs-fixer >/dev/null 2>&1', $output, $return);

        return !(bool) $return;
    }

    /**
     * @return string[]
     */
    private function getCommittedFileList()
    {
        $output = [];
        $return = 0;
        exec('git rev-parse --verify HEAD 2> /dev/null', $output, $return);
        // diff against HEAD or an empty tree object
        $against = $return == 0 ? 'HEAD' : '4b825dc642cb6eb9a060e54bf8d69288fbee4904';

        $fileList = [];
        exec("git diff --cached --name-only --diff-filter=ACM {$against} | grep -e '\.php$'", $fileList);

        return $fileList;
    }

    /**
     * @param string[] $files
     * @return bool
     */
    private function checkCodeStyle(array $files)
    {
        $succeed = true;
        $misses = [];

        foreach ($files as $file) {
            $output = [];
            $return = null;
            exec("php-cs-fixer fix -v --dry-run --level=psr2 " . escapeshellarg($file), $output, $return);
            if ($return != 0) {
                $misses[$file] = "php-cs-fixer fix -v --level=psr2 " . escapeshellarg($file);
                $this->error = true;
                $succeed = false;
            }
        }

        if ($succeed === false) {
            echo "Code style error in folling files:" . PHP_EOL . implode(PHP_EOL, array_keys($misses)) . PHP_EOL . PHP_EOL;
            echo "To fix, run: " . PHP_EOL . implode(PHP_EOL, $misses). PHP_EOL;
            echo PHP_EOL;
        }

        return $succeed;
    }

    /**
     * @param string[] $files
     * @return bool
     */
    private function phpLint(array $files)
    {
        $succeed = true;

        foreach ($files as $file) {
            $output = [];
            $return = 0;
            exec("php -l " . escapeshellarg($file), $output, $return);
            if ($return != 0) {
                echo "PHP syntax error at " . $file . ":" . PHP_EOL;
                echo implode(PHP_EOL, $output) . PHP_EOL;
                $this->error = true;
                $succeed = false;
            }
        }

        return $succeed;
    }

    /**
     * @return string
     */
    private function getRef()
    {
        $output = [];
        exec("git rev-parse --verify -q refs/stash", $output);
        $output = implode(PHP_EOL, $output) . PHP_EOL;
        return trim($output);
    }

    /**
     * @return bool
     */
    private function isRebase()
    {
        $output = [];
        exec("git symbolic-ref --short -q HEAD", $output);
        return (empty($output));
    }

    /**
     * Stash any changes to the working tree that are not going to be committed
     */
    private function stashTree()
    {
        exec("git stash save --keep-index --include-untracked -q");
    }

    /**
     * Unstash changes to the working tree that we had stashed
     */
    private function unstashTree()
    {
        exec("git stash pop -q --index");
    }

    /**
     * Check for duplicated migrations
     *
     * @return string|false
     */
    private function hasDuplicateMigrations()
    {
        exec('find ./_sql/migrations -type f | cut -d\/ -f4 | cut -d\- -f1 | sort | uniq -d', $output);
        if (count($output)) {
            return current($output);
        }

        return false;
    }
}

$checks = new PreCommitChecks();
$checks->run();
